{"version":3,"sources":["components/Main.js","components/Search.js","images/compass.svg","components/AppBar.js","contextApi/Context.js","components/FilterRestRating.js","components/AddRest.js","components/IndividualReview.js","images/restaurant.svg","components/Card.js","components/SideBar.js","mapStyles.js","App.js","index.js"],"names":["service","currentInfoWindow","Search","panTo","usePlacesAutocomplete","requestOptions","location","lat","lng","radius","ready","value","suggestions","status","data","setValue","clearSuggestions","handleSelect","address","a","getGeocode","results","getLatLng","console","log","className","onSelect","onChange","e","target","disabled","placeholder","map","description","NavBar","AppBar","position","Toolbar","Typography","color","src","compass","alt","height","style","float","cursor","onClick","window","reload","Context","createContext","FilterRestRating","useContext","minRating","resetMinRating","rating","starRatedColor","starEmptyColor","changeRating","newRating","numberOfStars","name","starDimension","AddRest","restaurants","setAddRestFlag","setRestaurants","useState","restName","setRestName","restRating","setRestRating","restDetails","useEffect","onSubmit","preventDefault","place_id","shortid","generate","icon","handleSubmit","type","Rating","event","newValue","parseInt","IndividualReview","photo","text","Card","imageSource","placeid","reviewResponse","setReviewResponse","reviewName","setReviewName","reviewText","setReviewText","reviewRating","setReviewRating","googleMapsApiKey","process","reviewDetails","reviewFetch","lati","lonn","url","axios","get","catch","error","request","response","result","photos","reviews","restaurant","trigger","modal","nested","close","open","width","author_name","profile_photo_url","handleReviewSubmit","size","restu","SideBar","libraries","mapContainerStyle","options","styles","disableDefaultUI","zoomControl","center","Main","useLoadScript","isLoaded","loadError","responseData","setResponseData","setMinRating","React","setLocation","addRestFlag","addReviewFlag","setAddReviewFlag","selected","setSelected","setError","setLat","setLng","mapRef","useRef","onMapLoad","useCallback","current","setZoom","google","maps","InfoWindow","places","PlacesService","nearbySearch","PlacesServiceStatus","OK","createMarkers","forEach","place","marker","Marker","geometry","title","addListener","placeId","fields","getDetails","placeResult","showDetails","placeInfowindow","firstPhoto","getUrl","setContent","CurrentRestLocation","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","restaurantsData","locations","Array","from","Grid","container","padding","item","xs","Paper","elevation","CardContent","Provider","setlat","filter","filteredPlace","variant","id","zoom","onLoad","latLng","origin","Point","anchor","scaledSize","Size","onCloseClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ab67af1.chunk.js","sourcesContent":["//import depencies\r\nimport React, { useState, useCallback, useRef } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  useLoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n} from \"@react-google-maps/api\";\r\nimport \"@reach/combobox/styles.css\";\r\nimport mapStyles from \"../mapStyles\";\r\nimport Search from \"./Search\";\r\nimport NavBar from \"./AppBar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Card, CardContent, Paper, Typography } from \"@material-ui/core\";\r\nimport Context from \"../contextApi/Context\";\r\nimport FilterRestRating from \"./FilterRestRating\";\r\nimport AddRest from \"./AddRest\";\r\nimport SideBar from \"./SideBar\";\r\nimport * as restaurantsData from \"../data/restaurants.json\";\r\nimport compass from \"../images/compass.svg\"\r\nimport restaurant from \"../images/restaurant.svg\"\r\n\r\n//initialize variables for the map\r\nlet service;\r\nlet currentInfoWindow;\r\nconst libraries = [\"places\"];\r\n//map's visible container layout size\r\nconst mapContainerStyle = {\r\n  height: \"70vh\",\r\n  width: \"100vw\",\r\n};\r\n//map options\r\nconst options = {\r\n  styles: mapStyles,\r\n  disableDefaultUI: true,\r\n  zoomControl: true,\r\n};\r\n//default center\r\nconst center = {\r\n  lat: -1.2746752,\r\n  lng: 36.8214016,\r\n};\r\n\r\n\r\nconst Main = () => {\r\n  //load the map, call the loadScript custom hook and the goople map keys\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n    libraries,\r\n  });\r\n\r\n  const [responseData, setResponseData] = useState({});\r\n  const [minRating, setMinRating] = useState(1);\r\n  const [location, setLocation] = React.useState({ lat: 0, lng: 0 });\r\n  const [addRestFlag, setAddRestFlag] = useState([]);\r\n  const [addReviewFlag, setAddReviewFlag] = useState(false);\r\n  const [restaurants, setRestaurants] = useState([]);\r\n  const [selected, setSelected] = useState(null);\r\n  const [error, setError] = useState();\r\n  const [lat, setLat] = useState(0)\r\n  const [lng, setLng] = useState(0)\r\n\r\n\r\n  //reset minimum rating declaration\r\n  const resetMinRating = (newValue) => {\r\n    setMinRating(newValue);\r\n  };\r\n\r\n  // const searchApi = async (lati, lonn) => {\r\n  //   const url = `url`;\r\n  //   const request = await axios.get(url).catch((error) => {\r\n  //     console.log(\"error!\", error);\r\n  //   });\r\n  //   const response = request;\r\n  //   if (response && response.status !== 200) {\r\n  //     setError(\"Error fetching information\");\r\n  //   }\r\n  //   if (response) {\r\n  //     console.log(\"sss\", restaurantsData.default);\r\n  //     setRestaurants(...restaurants, response.data.results);\r\n  //   }\r\n  // };\r\n\r\n\r\n  const onMapClick = ((event, addRestFlag) => {\r\n\r\n    setAddRestFlag(!addRestFlag);\r\n\r\n    let lat = event.latLng.lat()\r\n    let lng = event.latLng.lng()\r\n    //set coordinates states on click\r\n    setLat(lat);\r\n    setLng(lng)\r\n\r\n    console.log(\r\n      \"You clicked on the coordinates => lng: \" + lng + \" lat:\" + lat\r\n    );\r\n  });\r\n\r\n  const mapRef = useRef();\r\n  const onMapLoad = useCallback((map) => {\r\n    mapRef.current = map;\r\n  }, []);\r\n  // current position callback hook\r\n  const panTo = useCallback(({ lat, lng }) => {\r\n    mapRef.current.panTo({ lat, lng });\r\n    mapRef.current.setZoom(15);\r\n    let map = mapRef.current;\r\n    let request = {\r\n      location: { lat, lng },\r\n      radius: \"500\",\r\n      type: [\"restaurant\"],\r\n    };\r\n    currentInfoWindow = new window.google.maps.InfoWindow();\r\n    service = new window.google.maps.places.PlacesService(mapRef.current);\r\n\r\n    // Handle the results (up to 20) of the Nearby Search\r\n    const callback = (results, status) => {\r\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n        createMarkers(results);\r\n        setResponseData(results);\r\n      }\r\n    };\r\n    service.nearbySearch(request, callback);\r\n    // Set markers at the location of each place result\r\n    const createMarkers = (places) => {\r\n      places.forEach((place) => {\r\n        let marker = new window.google.maps.Marker({\r\n          position: place.geometry.location,\r\n          map: map,\r\n          title: place.name,\r\n        });\r\n        // Add click listener to each marker\r\n        window.google.maps.event.addListener(marker, \"click\", () => {\r\n          let request = {\r\n            placeId: place.place_id,\r\n            fields: [\r\n              \"name\",\r\n              \"formatted_address\",\r\n              \"geometry\",\r\n              \"rating\",\r\n              \"website\",\r\n              \"photos\",\r\n              \"reviews\"\r\n            ],\r\n          };\r\n          service.getDetails(request, (placeResult, status) => {\r\n            showDetails(placeResult, marker, status);\r\n          });\r\n        });\r\n      });\r\n    };\r\n    // Builds an InfoWindow to display details above the marker\r\n    const showDetails = (placeResult, marker, status) => {\r\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n        let placeInfowindow = new window.google.maps.InfoWindow();\r\n        let rating = \"None\";\r\n        if (placeResult.rating) rating = placeResult.rating;\r\n        let firstPhoto = { restaurant };\r\n        try {\r\n          if (placeResult.photos[0]) {\r\n            firstPhoto = placeResult.photos[0].getUrl();\r\n          }\r\n        } catch {\r\n          //console.error(\"error\");\r\n          firstPhoto = restaurant\r\n        }\r\n\r\n        placeInfowindow.setContent(`<div><img src=${firstPhoto} \r\n        style=\"width:100%;max-width:300px;height:300px;\"/><br><strong> \r\n        ${placeResult.name} \r\n          </strong><br>\r\n          Rating:${rating} \\u272e <br>         \r\n          </div>`);\r\n        placeInfowindow.open(marker.map, marker);\r\n        currentInfoWindow.close();\r\n        currentInfoWindow = placeInfowindow;\r\n      } else {\r\n        console.log(\"showDetails failed: \" + status);\r\n      }\r\n    };\r\n  }, []);\r\n  const CurrentRestLocation = ({ panTo }) => {\r\n    React.useEffect(() => {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          setLocation({\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          });\r\n          //searchApi(position.coords.latitude, position.coords.longitude);\r\n          setRestaurants(restaurantsData.default);\r\n          // if (location) {\r\n          //   searchApi();\r\n          // }\r\n          const lat = location.lat;\r\n          const lng = location.lng;\r\n          //console.log(lat);\r\n          panTo({ lat, lng });\r\n        },\r\n        () => null\r\n      );\r\n    }, [panTo]);\r\n    return <div></div>;\r\n  };\r\n  const locations = Array.from(responseData);\r\n  //load map\r\n  if (loadError) return \"Error\";\r\n  if (!isLoaded) return \"Loading...\";\r\n\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <Search panTo={panTo} />\r\n      <Grid container style={{ padding: 20 }}>\r\n        <Grid container item xs={4} className=\"grid\">\r\n          <Grid padding={5}>\r\n            <Paper elevation={3} style={{ padding: 10 }}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Context.Provider\r\n                    value={{\r\n                      error: error,\r\n                      setError: setError,\r\n                      resetMinRating: resetMinRating,\r\n                      minRating: minRating,\r\n                      location: location,\r\n                      addRestFlag: addRestFlag,\r\n                      setAddRestFlag: setAddRestFlag,\r\n                      addReviewFlag: addReviewFlag,\r\n                      setAddReviewFlag: setAddReviewFlag,\r\n                      lat: lat,\r\n                      setlat: setLat,\r\n                      lng: lng,\r\n                      setLng: setLng,\r\n                      restaurants: restaurants,\r\n                      setRestaurants: setRestaurants,\r\n                    }}\r\n                  >\r\n                    <SideBar />\r\n                    {addRestFlag && <AddRest />}\r\n                    {location && <FilterRestRating />}\r\n                  </Context.Provider>\r\n                  <Card>\r\n                    {locations &&\r\n                      locations\r\n                        .filter((place) => place.rating >= minRating)\r\n                        .map((filteredPlace) => (\r\n                          <Card variant=\"outlined\">\r\n                            <CardContent>\r\n                              <Typography key={filteredPlace.place_id} >\r\n                                <img src={filteredPlace.icon} alt=\"icon\" /> <br />\r\n                                {filteredPlace.name} <br />\r\n                          Rating:\r\n                          {filteredPlace.rating}\r\n                              </Typography>\r\n                            </CardContent>\r\n                          </Card>\r\n                        ))}\r\n                  </Card>\r\n                </CardContent>\r\n              </Card>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container item xs={8}>\r\n          <GoogleMap\r\n            id=\"map\"\r\n            mapContainerStyle={mapContainerStyle}\r\n            zoom={15}\r\n            center={center}\r\n            options={options}\r\n            onLoad={onMapLoad}\r\n            onClick={onMapClick}\r\n          >\r\n            {restaurants.map((restu) => {\r\n              if (restu.rating < minRating || !restu.rating) {\r\n                return null;\r\n              } else {\r\n                return (\r\n                  <div>\r\n                    <Marker\r\n                      key={`${lat}-${lng}`}\r\n                      position={{\r\n                        lat: lat,\r\n                        lng: lng,\r\n                      }}\r\n                      onClick={() => {\r\n                        setSelected(restu);\r\n                      }}\r\n                      icon={{\r\n                        url: compass,\r\n                        origin: new window.google.maps.Point(2, 2),\r\n                        anchor: new window.google.maps.Point(15, 15),\r\n                        scaledSize: new window.google.maps.Size(40, 40),\r\n                      }}\r\n                    />\r\n                    {selected ? (\r\n                      <InfoWindow\r\n                        position={{\r\n                          lat: selected.lat,\r\n                          lng: selected.lng,\r\n                        }}\r\n                        onCloseClick={() => {\r\n                          setSelected(null)\r\n                        }}\r\n                      >\r\n                        <div>\r\n                          <img src={restaurant} alt=\"placeholder\" />\r\n                          <span>\r\n                            <h2>{selected.name}</h2>  {selected.rating} Star Rating.\r\n                        </span>\r\n                        </div>\r\n                      </InfoWindow>\r\n                    ) : null}\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n            <CurrentRestLocation panTo={panTo} />\r\n          </GoogleMap>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Main;\r\n","import React from \"react\"\r\nimport usePlacesAutocomplete, {\r\n    getGeocode,\r\n    getLatLng,\r\n  } from \"use-places-autocomplete\";\r\n  import {\r\n    Combobox,\r\n    ComboboxInput,\r\n    ComboboxPopover,\r\n    ComboboxList,\r\n    ComboboxOption,\r\n  } from \"@reach/combobox\"; \r\n\r\n  \r\n//search a place using the autocomplete functionality\r\nconst Search = ({ panTo }) => {\r\n    const {\r\n      ready,\r\n      value,\r\n      suggestions: { status, data },\r\n      setValue,\r\n      clearSuggestions,\r\n    } = usePlacesAutocomplete({\r\n      requestOptions: {\r\n        location: { lat: () => 43.6532, lng: () => -79.3832 },\r\n        radius: 100 * 1000,\r\n      },\r\n    });  \r\n    const handleInput = (e) => {\r\n      setValue(e.target.value);\r\n    };\r\n  \r\n    const handleSelect = async (address) => {\r\n      setValue(address, false);\r\n      clearSuggestions();\r\n  \r\n      try {\r\n        const results = await getGeocode({ address });\r\n        const { lat, lng } = await getLatLng(results[0]);\r\n        panTo({ lat, lng });\r\n      } catch (error) {\r\n        console.log(\"😱 Error: \", error);\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <div className=\"search\">\r\n        <Combobox onSelect={handleSelect}>\r\n          <ComboboxInput          \r\n            value={value}\r\n            onChange={handleInput}\r\n            disabled={!ready}\r\n            placeholder=\"Search your location\"\r\n          />\r\n          <ComboboxPopover>\r\n            <ComboboxList>\r\n              {status === \"OK\" &&\r\n                data.map(({ description}) => (\r\n                  <ComboboxOption key={description} value={description} />\r\n                ))}\r\n            </ComboboxList>\r\n          </ComboboxPopover>\r\n        </Combobox>\r\n      </div>\r\n    );\r\n  }\r\n  export default Search","export default __webpack_public_path__ + \"static/media/compass.6bde5180.svg\";","import React from \"react\"\r\nimport AppBar from \"@material-ui/core/AppBar\"\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport compass from \"../images/compass.svg\"\r\n\r\n//top appbar\r\nconst NavBar = () => {\r\n    return(\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography color=\"inherit\">\r\n                        Restaurants Review\r\n                    </Typography>\r\n                    <img src={compass} alt=\"Current Location\" height=\"50\" style={{ float: \"right\", cursor: \"pointer\" }} onClick={() => window.location.reload(false)} />\r\n                </Toolbar>\r\n            </AppBar>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default NavBar","import {createContext} from \"react\"\r\n\r\nconst Context = createContext()\r\n\r\nexport default Context","import {useContext} from \"react\"\r\nimport Context from \"../contextApi/Context\"\r\nimport StarRatings from \"react-star-ratings\"\r\n\r\n//filter restaurants by ratings\r\nconst FilterRestRating = () => {\r\n    const { minRating, resetMinRating } = useContext(Context);\r\n    const changeRating = (newRating) => {\r\n      resetMinRating(newRating);\r\n    };\r\n  \r\n    return (\r\n      <div className=\"filter-rating\">\r\n        <span className=\"rating-text\">Filter by Rating</span>\r\n        <StarRatings\r\n          rating={minRating}\r\n          starRatedColor=\"rgb(220,20,60)\"\r\n          starEmptyColor=\"rgb(203, 211, 227)\"\r\n          changeRating={changeRating}\r\n          numberOfStars={5}\r\n          name=\"rating\"\r\n          starDimension=\"20px\"\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  export default FilterRestRating","import {useState, useContext, useEffect} from \"react\"\r\nimport Context from \"../contextApi/Context\"\r\nimport Rating from \"@material-ui/lab/Rating\"\r\nimport  \"../index.css\"\r\nimport shortid from \"shortid\"\r\n\r\n//add new restaurant\r\nconst AddRest = () => {\r\n    const { restaurants,setAddRestFlag, setRestaurants, lat,lng } = useContext(Context);\r\n    const [restName, setRestName] = useState('')\r\n    const [restRating, setRestRating] = useState(0)\r\n    \r\n    let restDetails = []\r\n    \r\n    useEffect(() => {        \r\n        setAddRestFlag(true)\r\n    }, [setAddRestFlag])\r\n    const handleSubmit = (e, restName, restRating) => {\r\n        e.preventDefault()\r\n        \r\n        restDetails = {\r\n            name: restName,\r\n            lat:lat,\r\n            lng:lng,\r\n            place_id: shortid.generate(),\r\n            rating: restRating,\r\n            icon: \"https://maps.google.com/mapfiles/kml/pal2/icon62.png\"\r\n\r\n        }        \r\n        setRestaurants([...restaurants, restDetails])\r\n        setAddRestFlag(false)\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"addrest\">\r\n            <h2>Add Restaurant </h2>\r\n            <form onSubmit={(e) => handleSubmit(e, restName, restRating)}>\r\n                <input type=\"text\" value={restName} onChange={(e) => setRestName(e.target.value)} placeholder=\"name\" />\r\n                <Rating\r\n                    name=\"simple-controlled\"\r\n                    value={restRating}\r\n                    onChange={(event, newValue) => {\r\n                        if (newValue != null) {\r\n                            setRestRating(parseInt(newValue));\r\n                        }\r\n                    }}\r\n                />\r\n                <button>submit</button>\r\n            </form>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddRest\r\n","import React from 'react'\r\nimport StarRatings from \"react-star-ratings\";\r\n\r\n//star rating and reviews\r\nconst IndividualReview = ({ photo, name, rating, text }) => {\r\n    return (\r\n        <div className=\"popupClass card\">\r\n\r\n            <div>\r\n                <img\r\n                    src={photo}\r\n                    alt=\"Reviewer\"\r\n                    style={{ height: \"100px\" }}\r\n                />\r\n            </div>\r\n            <div className=\"ReviewNameRating\">\r\n                <div><h2>{name}</h2></div>\r\n                <div><h3>{text}</h3></div>\r\n                <div> <StarRatings\r\n                    rating={rating}\r\n                    starRatedColor=\"rgb(220,20,60)\"\r\n                    starDimension=\"20px\"\r\n                />                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IndividualReview","export default __webpack_public_path__ + \"static/media/restaurant.e5d8d4c0.svg\";","import React, { useState } from \"react\";\r\nimport StarRatings from \"react-star-ratings\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Popup from \"reactjs-popup\";\r\nimport axios from \"axios\";\r\nimport IndividualReview from \"./IndividualReview\";\r\nimport restaurant from \"../images/restaurant.svg\"\r\nimport 'reactjs-popup/dist/index.css';\r\n\r\n//Add review and review render area\r\nconst Card = ({ name, imageSource, rating, placeid }) => {\r\n  \r\n  const [reviewResponse, setReviewResponse] = useState([]);\r\n  const [reviewName, setReviewName] = useState(\"\");\r\n  const [reviewText, setReviewText] = useState(\"\");\r\n  const [reviewRating, setReviewRating] = useState(0);\r\n  //const [restImage, setRestImage] = useState(\"\");\r\n  \r\n  const googleMapsApiKey = `${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}`; \r\n  let reviewDetails = [];\r\n\r\n  const reviewFetch = async (lati,lonn) => {\r\n    if (placeid != null) {\r\n      const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeid}&key=${googleMapsApiKey}`;\r\n      const request = await axios.get(url).catch((error) => {\r\n        console.log(\"error\", error);\r\n      });\r\n\r\n      const response = request;\r\n\r\n      if (response && response.status !== 200) {\r\n      }\r\n      if (response) {\r\n        if (response.data.result.photos != null) {\r\n          //setRestImage(response.data.result.photos[0].photo_reference);\r\n          setReviewResponse(response.data.result.reviews);\r\n        }\r\n      }\r\n    } else {\r\n      setReviewResponse([]);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleReviewSubmit = (\r\n    e,\r\n    reviewName,\r\n    setReviewName,\r\n    reviewRating,\r\n    setReviewRating,\r\n    reviewText\r\n  ) => {\r\n    e.preventDefault();\r\n    if (reviewName !== \"\" && reviewText !== \"\" && reviewRating !== 0) {\r\n      reviewDetails = {\r\n        author_name: reviewName,\r\n        rating: parseInt(reviewRating),\r\n        text: reviewText,\r\n        profile_photo_url:\r\n          \"http://maps.google.com/mapfiles/kml/pal2/icon62.png\",\r\n      };\r\n      setReviewName(\"\");\r\n      setReviewText(\"\");\r\n      setReviewRating(\"\");\r\n      setReviewResponse([...reviewResponse, reviewDetails]);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"card\">\r\n      <img\r\n        src={restaurant}\r\n        alt=\"restaurant \"\r\n        className=\"restaurant-image\"\r\n      />\r\n      <div className=\"container\">\r\n        <h4 className=\"restaurant-title\">{name}</h4>\r\n        <StarRatings\r\n          rating={rating}\r\n          starRatedColor=\"rgb(220,20,60)\"\r\n          starDimension=\"20px\"\r\n        />\r\n        <h2>\r\n          <Popup\r\n            trigger={\r\n              <button className=\"button\" onClick={reviewFetch}>\r\n                {\" \"}\r\n                review{\" \"}\r\n              </button>\r\n            }\r\n            modal\r\n            nested\r\n          >\r\n            {(close) => (\r\n              <div className=\"reviewarea\">\r\n                \r\n                <div className=\"header\">\r\n                  {\" \"}                  \r\n                  {name}\r\n                  <Popup\r\n                    trigger={open => (\r\n                      <button className=\"button\">Add Review - {open ? 'Opened' : 'Closed'}</button>\r\n                    )}\r\n                    position=\"right center\" \r\n                    \r\n                  >\r\n                    <form\r\n                      style={{ width: \"auto\" }}\r\n                      onSubmit={(e) =>\r\n                        handleReviewSubmit(\r\n                          e,\r\n                          reviewName,\r\n                          setReviewName,\r\n                          reviewRating,\r\n                          setReviewRating,\r\n                          reviewText\r\n                        )\r\n                      }\r\n                    >\r\n                      Name:\r\n                      <input\r\n                        type=\"text\"\r\n                        value={reviewName}\r\n                        onChange={(e) => setReviewName(e.target.value)}\r\n                      />\r\n                      <br />\r\n                      Comment:\r\n                      <input\r\n                        type=\"text\"\r\n                        value={reviewText}\r\n                        onChange={(e) => setReviewText(e.target.value)}\r\n                      />\r\n                      <br />\r\n                      Rating:\r\n                      <Rating\r\n                        name=\"simple-controlled\"\r\n                        size=\"small\"\r\n                        value={reviewRating}\r\n                        onChange={(event, newValue) => {\r\n                          if (newValue != null) {\r\n                            setReviewRating(parseInt(newValue));\r\n                          }\r\n                        }}\r\n                      />\r\n                      <br />\r\n                      <button>submit</button>\r\n                    </form>\r\n                  </Popup>\r\n                </div>\r\n                <div>\r\n                  {reviewResponse.map((restu) => {\r\n                    return (\r\n                      <div>\r\n                        <IndividualReview\r\n                        key={restu.placeid}\r\n                          photo={restu.profile_photo_url}\r\n                          name={restu.author_name}\r\n                          rating={restu.rating}\r\n                          text={restu.text}\r\n                        />\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Popup>\r\n        </h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React, { useContext } from \"react\";\r\nimport Context from \"../contextApi/Context\";\r\nimport Card from \"./Card\";\r\nimport shortid from \"shortid\";\r\n\r\n//render restaurants in sidebar\r\nconst SideBar = () => {\r\n  const { restaurants, minRating } = useContext(Context);\r\n  return (\r\n    <div className=\"sidebar\">\r\n      {restaurants.map((restu) => {\r\n        if (restu.rating < minRating || !restu.rating) {\r\n          return null;\r\n        } else {\r\n          return (\r\n            <Card\r\n              key={shortid.generate()}\r\n              name={restu.name}\r\n              imageSource={restu.photos}\r\n              rating={restu.rating}\r\n              placeid={restu.place_id}\r\n            />\r\n          );\r\n        }\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideBar;","/* eslint-disable import/no-anonymous-default-export */\r\nexport default [\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"weight\": \"2.00\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#9c9c9c\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"labels.text\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#f2f2f2\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape.man_made\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 45\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#eeeeee\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#7b7b7b\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"labels.text.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.arterial\",\r\n        \"elementType\": \"labels.icon\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#46bcec\"\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#c8d7d4\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#070707\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"labels.text.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    }\r\n]","import React from \"react\";\r\nimport Main from \"./components/Main\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Main />\r\n      </div>\r\n  )\r\n\r\n}\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  \r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}